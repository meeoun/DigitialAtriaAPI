<?php

namespace App\Models;

use App\Models\Traits\Commentable;
use App\Models\Traits\Imageable;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\Relation;
use Illuminate\Database\Eloquent\SoftDeletes;
use Laravel\Scout\Searchable;
use Spatie\MediaLibrary\HasMedia;
use Spatie\MediaLibrary\InteractsWithMedia;
use Spatie\MediaLibrary\MediaCollections\Models\Media;
use Spatie\Tags\HasTags;

class Post extends Model implements HasMedia
{
    use HasFactory;
    use InteractsWithMedia;
    use HasTags;
    use Searchable;
    use SoftDeletes;
    use Commentable;
    use Imageable;


    protected $dates = [
      'published_at'
    ];

    protected $fillable =['title'];


    public function comments()
    {
        return $this->morphMany(Comment::class, 'commentable');
    }

    public function toSearchableArray()
    {
        $array = ['title','body', 'score_description', 'review_call_out'];

        // Customize array...
        return $array;
    }

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        self::saving(function($model){
            $model->average_score = $model->averageScore();
            $model->score_description = $model->scoreDescription();
        });
        self::updating(function($model){
            $model->average_score = $model->averageScore();
            $model->score_description = $model->scoreDescription();
        });
    }

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function author()
    {
        return $this->belongsTo(Author::class, 'user_id')
            ->withoutGlobalScope('author');
    }


    public function averageScore()
    {
        if($this->review_scores)
        {
            $score = 0;
            $count = 0;
            foreach(json_decode($this->review_scores) as $review_score)
            {
                $score += $review_score->score;
                $count++;
            }
            return ($score/$count);
        }
        return null;
    }


    public function scoreDescription()
    {
        if($this->type === "reviews")
        {
            switch ((int)$this->average_score)
        {
            case 0:
                return "What?";
            case 1:
                return "Broken";
            case 2:
                return "Unplayable";
            case 3:
                return "Terrible";
            case 4:
                return "Bad";
            case 5:
                return "Average";
            case 6:
                return "OK";
            Case 7:
                return "Good";
            case 8:
                return "Great!";
            case 9:
                return "Awesome!";
            case 10:
                return "Perfect";
        }

        }
return null;

    }

    public function registerMediaConversions(Media $media = null): void
    {
        /*Main Image Conversions */
        $conversions = array('400_430', '270_200','100_80','80_70','185_80','270_150','85_70','89_79','250_200','380_250','185_180');
        foreach ($conversions as $conversion)
        {
            $array = explode("_",$conversion);
            $width = (int)$array[0];
            $height = (int)$array[1];
            $this->addMediaConversion("dimension_$conversion")
                ->fit("crop", $width, $height)
                ->performOnCollections('main');
        }


        /*Banner*/
        $conversions = array('770_200', '770_310');

        foreach ($conversions as $conversion)
        {
            $array = explode("_",$conversion);
            $width = (int)$array[0];
            $height = (int)$array[1];
            $this->addMediaConversion("dimension_$conversion")
                ->fit("crop", $width, $height)
                ->performOnCollections('banner');
        }



        /* Carousel Image Conversions */
        $conversions = array('770_380');
        foreach ($conversions as $conversion)
        {
            $array = explode("_",$conversion);
            $width = (int)$array[0];
            $height = (int)$array[1];
            $this->addMediaConversion("dimension_$conversion")
                ->fit("crop", $width, $height)
                ->performOnCollections('carousel');
        }


        /* Gallery Image Conversions */
        $conversions = array('185_160');
        foreach ($conversions as $conversion)
        {
            $array = explode("_",$conversion);
            $width = (int)$array[0];
            $height = (int)$array[1];
            $this->addMediaConversion("dimension_$conversion")
                ->fit("crop", $width, $height)
                ->performOnCollections('gallery');
        }


    }
}
